import { MainContext } from "@/context/MainContext";
import { CategoryInterface } from "@/interfaces/CategoryInterface";
import { CompanyInterface } from "@/interfaces/CompanyInterface";
import { ProductsInterface } from "@/interfaces/ProductsInterface";
import ProductTemplate from "@/components/templates/ProductTemplate/ProductTemplate";
import axios from "axios";
import { GetStaticPaths, GetStaticProps } from "next";
import Head from "next/head";
import React, { FC, useContext } from "react";

interface Props {
  products: ProductsInterface[];
  categories: CategoryInterface[];
  company: CompanyInterface;
}

const CategoryPage: FC<Props> = ({ products, categories, company }) => {
  const { setProducts, setCategories, setCompany } = useContext(MainContext);
  setProducts(products);
  setCategories(categories);
  setCompany(company);

  return (
    <>
      <Head>
        <title>Desserts</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <ProductTemplate />
      </main>
    </>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  const API_URL = process.env.API_URL;
  const products = await axios.get(`${API_URL}/categorieForProducts`);
  const paths = products.data?.map((p: ProductsInterface) => ({
    params: {
      id: p.id.toString(),
    },
  }));
  return {
    paths,
    fallback: true,
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const API_URL = process.env.API_URL;

  if (params && params.id) {
    const products = await axios.get(`${API_URL}/categorieForProducts/${params.id}`);
    const company = await axios.get(`${API_URL}/companie`);
    const categories = await axios.get(`${API_URL}/menu`);

    if (Object.keys(products).length === 0) {
      return {
        notFound: true,
      };
    }

    return {
      props: {
        products: products.data,
        company: company.data,
        categories: categories.data,
      },
    };
  }

  return {
    notFound: true,
  };
};

export default CategoryPage;
